import { Injectable, OnDestroy } from '@angular/core';
import { interval, Subject, switchMap, takeUntil, tap, EMPTY } from 'rxjs'; // üëà –¥–æ–±–∞–≤–ª—è–µ–º EMPTY
import { AuthenticationService } from '@service/auth.service';
import { JwtHelperService } from '@auth0/angular-jwt';

@Injectable({ providedIn: 'root' })
export class TokenRefreshService implements OnDestroy {
  private destroy$ = new Subject<void>();
  private jwtHelper = new JwtHelperService();

  constructor(private authService: AuthenticationService) {}

  startTokenRefreshTimer(): void {
    this.stopTokenRefreshTimer();

    interval(60_000)
      .pipe(
        takeUntil(this.destroy$),
        switchMap(() => {
          const token = this.authService.currentUserValue?.token;
          if (!token) {
            // –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return EMPTY;
          }

          const expirationDate = this.jwtHelper.getTokenExpirationDate(token);
          const now = new Date();
          const isExpired = this.jwtHelper.isTokenExpired(token);

          console.log(`[TokenRefresh] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç: ${expirationDate?.toISOString() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
          console.log(`[TokenRefresh] –°–µ–π—á–∞—Å: ${now.toISOString()}, –ò—Å—Ç—ë–∫: ${isExpired}`);

          if (isExpired) {
            console.log('[TokenRefresh] –¢–æ–∫–µ–Ω —É–∂–µ –∏—Å—Ç—ë–∫. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.');
            return this.authService.refreshToken();
          }

          if (expirationDate) {
            const timeUntilExpiry = expirationDate.getTime() - now.getTime();
            const shouldRefresh = timeUntilExpiry < 2 * 60 * 1000; // –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è

            if (shouldRefresh) {
              console.log('[TokenRefresh] –¢–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á—ë—Ç. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ.');
              return this.authService.refreshToken();
            }
          }

          // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
          return EMPTY;
        })
      )
      .subscribe({
        next: (user) => {
          if (user) {
            console.log('[TokenRefresh] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
          }
        },
        error: (err) => {
          console.error('[TokenRefresh] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', err);
        }
      });
  }

  stopTokenRefreshTimer(): void {
    this.destroy$.next();
    this.destroy$.complete();
    this.destroy$ = new Subject<void>();
  }

  ngOnDestroy(): void {
    this.stopTokenRefreshTimer();
  }
}
